#!/usr/bin/env bash

# Claude Code ‰∏≠ÊñáÂºÄÂèëÂ•ó‰ª∂Â¢ûÂº∫ËÆæÁΩÆËÑöÊú¨
# ÂåÖÂê´‰∫§‰∫íÂºè MCP ÊúçÂä°Âô®ÈÖçÁΩÆ

set -euo pipefail

# È¢úËâ≤ÂÆö‰πâ
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

# ÈÖçÁΩÆÂèòÈáè
TARGET_DIR="${INSTALLER_ORIGINAL_PWD:-$(pwd)}"
INSTALL_CONTEXT7="n"
INSTALL_GEMINI="n"
INSTALL_NOTIFICATIONS="y"
IS_INTERACTIVE=true

# Ê£ÄÊü•ÊòØÂê¶‰∏∫‰∫§‰∫íÂºèÁªàÁ´Ø
if [ ! -t 0 ]; then
    IS_INTERACTIVE=false
    # Èùû‰∫§‰∫íÂºèÊ®°Âºè‰∏ãÁöÑÈªòËÆ§ÈÖçÁΩÆ
    INSTALL_CONTEXT7="y"
    INSTALL_GEMINI="y"
    INSTALL_NOTIFICATIONS="y"
fi

print_color() {
    local color=$1
    shift
    echo -e "${color}$@${NC}"
}

# ÂÆâÂÖ®ËØªÂèñÂáΩÊï∞ÔºàÈÄÇÈÖçÈùû‰∫§‰∫íÊ®°ÂºèÔºâ
safe_read_yn() {
    local var_name="$1"
    local prompt="$2"
    local default="${3:-n}"
    
    if [ "$IS_INTERACTIVE" = false ]; then
        eval "$var_name=\"$default\""
        return 0
    fi
    
    local response
    while true; do
        echo -n "$prompt"
        read response
        case "${response,,}" in
            y|yes|ÊòØ|y*)
                eval "$var_name=\"y\""
                return 0
                ;;
            n|no|Âê¶|n*|"")
                eval "$var_name=\"n\""
                return 0
                ;;
            *)
                print_color "$YELLOW" "ËØ∑ËæìÂÖ• y/yes/ÊòØ Êàñ n/no/Âê¶"
                ;;
        esac
    done
}

print_header() {
    echo
    print_color "$BLUE" "==========================================="
    print_color "$BLUE" "   Claude Code ‰∏≠ÊñáÂºÄÂèëÂ•ó‰ª∂ËÆæÁΩÆ"
    print_color "$BLUE" "==========================================="
    echo
}

# ËØ¢ÈóÆÂèØÈÄâÁªÑ‰ª∂
prompt_optional_components() {
    if [ "$IS_INTERACTIVE" = false ]; then
        print_color "$CYAN" "ü§ñ Èùû‰∫§‰∫íÊ®°ÂºèÔºöÂêØÁî®ÊâÄÊúâ MCP ÂäüËÉΩ"
        return 0
    fi
    
    echo
    print_color "$YELLOW" "ÂèØÈÄâÁªÑ‰ª∂ÈÖçÁΩÆÔºö"
    echo
    
    # Context7 MCP
    print_color "$CYAN" "Context7 MCP ÊúçÂä°Âô®ÔºàÂº∫ÁÉàÊé®ËçêÔºâ"
    echo "  ‰∏∫Â§ñÈÉ®Â∫ìÊèê‰æõÊúÄÊñ∞ÊñáÊ°£ÊîØÊåÅÔºàReact„ÄÅFastAPI Á≠âÔºâ"
    echo "  ‰ªìÂ∫ìÔºöhttps://github.com/upstash/context7"
    if ! safe_read_yn INSTALL_CONTEXT7 "  ÂÆâË£Ö Context7 ÈõÜÊàêÔºü(y/n): " "y"; then
        exit 1
    fi
    echo
    
    # Gemini MCP
    print_color "$CYAN" "Gemini Âä©Êâã MCP ÊúçÂä°Âô®ÔºàÂº∫ÁÉàÊé®ËçêÔºâ"
    echo "  ÂêØÁî®Êû∂ÊûÑÂí®ËØ¢ÂíåÈ´òÁ∫ß‰ª£Á†ÅÂÆ°Êü•ÂäüËÉΩ"
    echo "  ‰ªìÂ∫ìÔºöhttps://github.com/jamubc/gemini-mcp-tool"
    if ! safe_read_yn INSTALL_GEMINI "  ÂÆâË£Ö Gemini ÈõÜÊàêÔºü(y/n): " "y"; then
        exit 1
    fi
    echo
    
    # ÈÄöÁü•Á≥ªÁªü
    print_color "$CYAN" "ÈÄöÁü•Á≥ªÁªüÔºà‰æøÂà©ÂäüËÉΩÔºâ"
    echo "  ‰ªªÂä°ÂÆåÊàêÊàñÈúÄË¶ÅËæìÂÖ•Êó∂Êí≠ÊîæÈü≥È¢ëÊèêÈÜí"
    if ! safe_read_yn INSTALL_NOTIFICATIONS "  ËÆæÁΩÆÈÄöÁü• HookÔºü(y/n): " "y"; then
        exit 1
    fi
}

# ÁîüÊàê settings.local.json ÈÖçÁΩÆ
generate_settings() {
    local config_file="$TARGET_DIR/.claude/settings.local.json"
    mkdir -p "$(dirname "$config_file")"
    
    print_color "$YELLOW" "üîß Ê≠£Âú®ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂..."
    
    # ÊûÑÂª∫ÈÖçÁΩÆ
    cat > "$config_file" << 'EOF'
{
  "hooks": {
EOF

    # PreToolUse hooks
    local pretooluse_hooks=()
    
    # MCP ÂÆâÂÖ®Êâ´Êèè
    if [ "$INSTALL_CONTEXT7" = "y" ] || [ "$INSTALL_GEMINI" = "y" ]; then
        pretooluse_hooks+=("mcp-security")
    fi
    
    # Gemini ‰∏ä‰∏ãÊñáÊ≥®ÂÖ•
    if [ "$INSTALL_GEMINI" = "y" ]; then
        pretooluse_hooks+=("gemini-context")
    fi
    
    # Â≠êÊô∫ËÉΩ‰Ωì‰∏ä‰∏ãÊñáÊ≥®ÂÖ•ÔºàÊ†∏ÂøÉÂäüËÉΩÔºâ
    pretooluse_hooks+=("subagent-context")
    
    # ÂÜôÂÖ• PreToolUse hooks
    if [ ${#pretooluse_hooks[@]} -gt 0 ]; then
        cat >> "$config_file" << 'EOF'
    "PreToolUse": [
EOF
        
        local first_hook=true
        
        # MCP ÂÆâÂÖ®Êâ´Êèè
        if [[ " ${pretooluse_hooks[@]} " =~ " mcp-security " ]]; then
            [ "$first_hook" = false ] && echo "," >> "$config_file"
            cat >> "$config_file" << EOF
      {
        "matcher": "mcp__",
        "hooks": [
          {
            "type": "command",
            "command": "bash $TARGET_DIR/.claude/hooks/mcp-security-scan.sh"
          }
        ]
      }
EOF
            first_hook=false
        fi
        
        # Gemini ‰∏ä‰∏ãÊñáÊ≥®ÂÖ•
        if [[ " ${pretooluse_hooks[@]} " =~ " gemini-context " ]]; then
            [ "$first_hook" = false ] && echo "," >> "$config_file"
            cat >> "$config_file" << EOF
      {
        "matcher": "mcp__gemini",
        "hooks": [
          {
            "type": "command",
            "command": "bash $TARGET_DIR/.claude/hooks/gemini-context-injector.sh"
          }
        ]
      }
EOF
            first_hook=false
        fi
        
        # Â≠êÊô∫ËÉΩ‰Ωì‰∏ä‰∏ãÊñáÊ≥®ÂÖ•
        if [[ " ${pretooluse_hooks[@]} " =~ " subagent-context " ]]; then
            [ "$first_hook" = false ] && echo "," >> "$config_file"
            cat >> "$config_file" << EOF
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "bash $TARGET_DIR/.claude/hooks/subagent-context-injector.sh"
          }
        ]
      }
EOF
        fi
        
        cat >> "$config_file" << 'EOF'
    ]
EOF
    fi
    
    # ÈÄöÁü• hooks
    if [ "$INSTALL_NOTIFICATIONS" = "y" ]; then
        # Â¶ÇÊûúÊúâ PreToolUse hooksÔºåÊ∑ªÂä†ÈÄóÂè∑
        if [ ${#pretooluse_hooks[@]} -gt 0 ]; then
            echo "," >> "$config_file"
        fi
        
        cat >> "$config_file" << EOF
    "Notification": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "bash $TARGET_DIR/.claude/hooks/notify.sh input"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "bash $TARGET_DIR/.claude/hooks/notify.sh complete"
          }
        ]
      }
    ]
EOF
    fi
    
    # ÁªìÊùü hooks ÂØπË±°
    cat >> "$config_file" << 'EOF'
  },
EOF
    
    # ÁªìÊùüÊï¥‰∏™ÈÖçÁΩÆÊñá‰ª∂ÔºàMCP ÊúçÂä°Âô®Â∑≤ÁßªËá≥È°πÁõÆÁ∫ßÈÖçÁΩÆÔºâ
    cat >> "$config_file" << 'EOF'
}
EOF
    
    print_color "$GREEN" "‚úÖ ÈÖçÁΩÆÂ∑≤ÁîüÊàêÔºö$config_file"
}

# ÂÆâË£Ö MCP ÊúçÂä°Âô®Ôºà‰ΩøÁî®Êñ∞ÁöÑÈ°πÁõÆÁ∫ßÂÆâË£ÖÊñπÊ≥ïÔºâ
install_mcp_servers() {
    if [ "$INSTALL_CONTEXT7" = "y" ] || [ "$INSTALL_GEMINI" = "y" ]; then
        echo
        print_color "$CYAN" "üì° Ê≠£Âú®ÂÆâË£Ö MCP ÊúçÂä°Âô®ÔºàÈ°πÁõÆÁ∫ßÔºâ..."
        
        # ÂàáÊç¢Âà∞ÁõÆÊ†áÁõÆÂΩïËøõË°åÂÆâË£Ö
        cd "$TARGET_DIR"
        
        if [ "$INSTALL_CONTEXT7" = "y" ]; then
            print_color "$YELLOW" "üìö Ê≠£Âú®ÂÆâË£Ö Context7 MCP ÊúçÂä°Âô®..."
            if claude mcp add context7 --scope project -- npx -y @upstash/context7-mcp --api-key YOUR_CONTEXT7_API_KEY 2>/dev/null; then
                print_color "$GREEN" "  ‚úÖ Context7 MCP ÊúçÂä°Âô®Â∑≤ÂÆâË£ÖÔºàÈ°πÁõÆÁ∫ßÔºâ"
            else
                print_color "$YELLOW" "  ‚ö†Ô∏è  Context7 ÂÆâË£ÖÂ§±Ë¥•ÔºåËØ∑ÊâãÂä®ËøêË°åÔºöclaude mcp add context7 --scope project -- npx -y @upstash/context7-mcp --api-key YOUR_CONTEXT7_API_KEY"
            fi
        fi
        
        if [ "$INSTALL_GEMINI" = "y" ]; then
            print_color "$YELLOW" "üß† Ê≠£Âú®ÂÆâË£Ö Gemini MCP ÊúçÂä°Âô®..."
            if claude mcp add gemini --scope project -- npx -y gemini-mcp --api-key YOUR_GEMINI_API_KEY 2>/dev/null; then
                print_color "$GREEN" "  ‚úÖ Gemini MCP ÊúçÂä°Âô®Â∑≤ÂÆâË£ÖÔºàÈ°πÁõÆÁ∫ßÔºâ"
            else
                print_color "$YELLOW" "  ‚ö†Ô∏è  Gemini ÂÆâË£ÖÂ§±Ë¥•ÔºåËØ∑ÊâãÂä®ËøêË°åÔºöclaude mcp add gemini --scope project -- npx -y gemini-mcp --api-key YOUR_GEMINI_API_KEY"
            fi
        fi
        
        print_color "$GREEN" "‚úÖ MCP ÊúçÂä°Âô®ÈÖçÁΩÆÂÆåÊàêÔºÅÈÖçÁΩÆÂ∑≤‰øùÂ≠òÂà∞ .mcp.json"
    fi
}

# ÊòæÁ§∫ MCP ÊúçÂä°Âô®‰ø°ÊÅØ
display_mcp_info() {
    if [ "$INSTALL_CONTEXT7" = "y" ] || [ "$INSTALL_GEMINI" = "y" ]; then
        echo
        print_color "$BLUE" "=== MCP ÊúçÂä°Âô®ËÆæÁΩÆ‰ø°ÊÅØ ==="
        echo
        print_color "$GREEN" "‚úÖ MCP ÊúçÂä°Âô®Â∑≤ÈÖçÁΩÆ‰∏∫È°πÁõÆÁ∫ßÂÆâË£ÖÔºÅ"
        echo
        echo "ÈÖçÁΩÆÁöÑÊúçÂä°Âô®Ôºö"
        
        if [ "$INSTALL_CONTEXT7" = "y" ]; then
            print_color "$YELLOW" "üìö Context7 MCP ÊúçÂä°Âô®Ôºö"
            echo "  ‚Ä¢ Êèê‰æõÊúÄÊñ∞Â§ñÈÉ®Â∫ìÊñáÊ°£"
            echo "  ‚Ä¢ ÊîØÊåÅ React„ÄÅFastAPI„ÄÅNext.js Á≠â"
            echo "  ‚Ä¢ ‰ΩøÁî®ÊñπÊ≥ïÔºömcp__context7__get_library_docs"
            echo
        fi
        
        if [ "$INSTALL_GEMINI" = "y" ]; then
            print_color "$YELLOW" "üß† Gemini MCP ÊúçÂä°Âô®Ôºö"
            echo "  ‚Ä¢ Ê∑±Â∫¶Êû∂ÊûÑÂí®ËØ¢"
            echo "  ‚Ä¢ È´òÁ∫ß‰ª£Á†ÅÂÆ°Êü•"
            echo "  ‚Ä¢ ‰ΩøÁî®ÊñπÊ≥ïÔºömcp__gemini__consult_gemini"
            echo
        fi
        
        print_color "$CYAN" "üí° ÈáçË¶ÅÈÖçÁΩÆÊèêÈÜíÔºö"
        echo "  ‚Ä¢ MCP ÊúçÂä°Âô®Â∑≤ÂÆâË£Ö‰∏∫È°πÁõÆÁ∫ßÈÖçÁΩÆ"
        echo "  ‚Ä¢ ÈÖçÁΩÆÊñá‰ª∂Ôºö.mcp.jsonÔºàÂú®È°πÁõÆÊ†πÁõÆÂΩïÔºâ"
        echo "  ‚Ä¢ ÈúÄË¶ÅÂ∞ÜÂç†‰ΩçÁ¨¶ API ÂØÜÈí•ÊõøÊç¢‰∏∫ÁúüÂÆûÂØÜÈí•Ôºö"
        echo "    - YOUR_CONTEXT7_API_KEY ‚Üí ‰Ω†ÁöÑ Context7 API ÂØÜÈí•"  
        echo "    - YOUR_GEMINI_API_KEY ‚Üí ‰Ω†ÁöÑ Gemini API ÂØÜÈí•"
        echo "  ‚Ä¢ API ÂØÜÈí•Ëé∑ÂèñÊñπÂºèËØ∑ÂèÇËÄÉÂêÑÊúçÂä°ÂÆòÊñπÊñáÊ°£"
        echo "  ‚Ä¢ È°πÁõÆÁ∫ßÈÖçÁΩÆ‰ªÖÂú®Ê≠§È°πÁõÆÁõÆÂΩï‰∏≠ÁîüÊïà"
    fi
}

# ‰∏ªÂÆâË£ÖÊµÅÁ®ã
main() {
    print_header
    print_color "$CYAN" "üéØ ÁõÆÊ†áÁõÆÂΩï: $TARGET_DIR"
    
    # Ê£ÄÊü•ÁõÆÂΩïÊùÉÈôê
    if [ ! -w "$TARGET_DIR" ]; then
        print_color "$RED" "‚ùå Êó†Ê≥ïÂÜôÂÖ•ÁõÆÊ†áÁõÆÂΩï: $TARGET_DIR"
        exit 1
    fi
    
    # ËØ¢ÈóÆÂèØÈÄâÁªÑ‰ª∂
    prompt_optional_components
    
    echo
    print_color "$YELLOW" "üìÑ Ê≠£Âú®Â§çÂà∂‰∏≠ÊñáÂåñÊ®°ÊùøÊñá‰ª∂..."
    
    # Â§çÂà∂ CLAUDE.md
    if [ -f "templates/CLAUDE.md" ]; then
        cp "templates/CLAUDE.md" "$TARGET_DIR/" 2>/dev/null || {
            print_color "$YELLOW" "‚ö†Ô∏è  CLAUDE.md Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÂ§çÂà∂"
        }
        print_color "$GREEN" "  ‚úÖ CLAUDE.md (‰∏ª AI ‰∏ä‰∏ãÊñáÊñá‰ª∂)"
    fi
    
    # Â§çÂà∂ MCP ËßÑÂàô
    if [ -f "templates/MCP-ASSISTANT-RULES.md" ]; then
        cp "templates/MCP-ASSISTANT-RULES.md" "$TARGET_DIR/" 2>/dev/null || {
            print_color "$YELLOW" "‚ö†Ô∏è  MCP-ASSISTANT-RULES.md Â∑≤Â≠òÂú®ÔºåË∑≥ËøáÂ§çÂà∂"
        }
        print_color "$GREEN" "  ‚úÖ MCP-ASSISTANT-RULES.md (MCP Âä©ÊâãËßÑÂàô)"
    fi
    
    # Â§çÂà∂ÊñáÊ°£Êñá‰ª∂
    if [ -d "templates/docs" ]; then
        mkdir -p "$TARGET_DIR/docs/ai-context"
        find "templates/docs" -type f -name "*.md" | while read -r file; do
            rel_path="${file#templates/docs/}"
            target_file="$TARGET_DIR/docs/$rel_path"
            mkdir -p "$(dirname "$target_file")"
            if [ ! -f "$target_file" ]; then
                cp "$file" "$target_file"
            fi
        done
        print_color "$GREEN" "  ‚úÖ docs/ (‰∏≠ÊñáÊñáÊ°£Á≥ªÁªü)"
    fi
    
    # Â§çÂà∂ .claude ÁõÆÂΩï
    if [ -d "templates/.claude" ]; then
        # Â§çÂà∂ commands
        if [ -d "templates/.claude/commands" ]; then
            mkdir -p "$TARGET_DIR/.claude/commands"
            cp -r "templates/.claude/commands/"* "$TARGET_DIR/.claude/commands/" 2>/dev/null || true
            print_color "$GREEN" "  ‚úÖ .claude/commands/ (Claude Code ÂëΩ‰ª§ÈõÜ)"
        fi
        
        # Â§çÂà∂ hooks
        if [ -d "templates/.claude/hooks" ]; then
            mkdir -p "$TARGET_DIR/.claude/hooks"
            cp -r "templates/.claude/hooks/"* "$TARGET_DIR/.claude/hooks/" 2>/dev/null || true
            chmod +x "$TARGET_DIR/.claude/hooks/"*.sh 2>/dev/null || true
            print_color "$GREEN" "  ‚úÖ .claude/hooks/ (‰∏≠ÊñáÂåñ Hook ËÑöÊú¨ÂíåÈÖçÁΩÆ)"
        fi
    fi
    
    # Â§çÂà∂Á§∫‰æã
    if [ -d "examples" ]; then
        mkdir -p "$TARGET_DIR/examples"
        cp -r "examples/"* "$TARGET_DIR/examples/" 2>/dev/null || true
        print_color "$GREEN" "  ‚úÖ examples/ (‰∏≠Êñá‰ΩøÁî®Á§∫‰æã)"
    fi
    
    echo
    print_color "$CYAN" "üîß Ê≠£Âú®ÁîüÊàêÈ°πÁõÆÈÖçÁΩÆ..."
    
    # ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂
    generate_settings
    
    # ÂÆâË£Ö MCP ÊúçÂä°Âô®ÔºàÊñ∞ÁöÑÈ°πÁõÆÁ∫ßÊñπÊ≥ïÔºâ
    install_mcp_servers
    
    # ÊòæÁ§∫ MCP ‰ø°ÊÅØ
    display_mcp_info
    
    echo
    print_color "$GREEN" "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    print_color "$GREEN" "üéâ Claude Code ‰∏≠ÊñáÂºÄÂèëÂ•ó‰ª∂ËÆæÁΩÆÂÆåÊàêÔºÅ"
    print_color "$GREEN" "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    echo
    print_color "$CYAN" "üìñ ‰∏ã‰∏ÄÊ≠•Ôºö"
    echo "  1. Êü•Áúã CLAUDE.md ‰∫ÜËß£‰∏≠ÊñáÂåñÁöÑ AI Êåá‰ª§"
    echo "  2. ÈòÖËØª docs/README.md Â≠¶‰π†ÊñáÊ°£Á≥ªÁªü"
    echo "  3. ÂèÇËÄÉ examples/ ÁõÆÂΩï‰∏≠ÁöÑ‰ΩøÁî®Á§∫‰æã"
    
    if [ "$INSTALL_GEMINI" = "y" ]; then
        echo "  4. ÁºñËæë MCP-ASSISTANT-RULES.md ËÆæÁΩÆ Gemini ÁºñÁ†ÅÊ†áÂáÜ"
    fi
    
    echo "  $([ "$INSTALL_GEMINI" = "y" ] && echo 5 || echo 4). ËøêË°å 'claude' ÂºÄÂßã‰Ω†ÁöÑ‰∏≠ÊñáÂºÄÂèë‰πãÊóÖÔºÅ"
    echo
    
    # MCP ÊúçÂä°Âô®ÈÖçÁΩÆÊåáÂØº
    if [ "$INSTALL_CONTEXT7" = "y" ] || [ "$INSTALL_GEMINI" = "y" ]; then
        echo
        print_color "$CYAN" "üì° MCP ÊúçÂä°Âô®ÈÖçÁΩÆÂÆåÊàêÔºö"
        echo
        print_color "$YELLOW" "‰∏ã‰∏ÄÊ≠•ÈÖçÁΩÆÔºö"
        echo "  1. ÁºñËæë .mcp.json Êñá‰ª∂ÔºåÂ∞ÜÂç†‰ΩçÁ¨¶ API ÂØÜÈí•ÊõøÊç¢‰∏∫ÁúüÂÆûÂØÜÈí•"
        echo "  2. Context7 API ÂØÜÈí•Ôºöhttps://context7.com/"
        echo "  3. Gemini API ÂØÜÈí•Ôºöhttps://makersuite.google.com/app/apikey"
        echo
        print_color "$YELLOW" "È™åËØÅ MCP ÊúçÂä°Âô®Áä∂ÊÄÅÔºö"
        echo "  claude mcp list"
        echo
        print_color "$YELLOW" "üí° MCP ÊúçÂä°Âô®Â∑≤ÈÖçÁΩÆ‰∏∫È°πÁõÆÁ∫ßÔºå‰ªÖÂú®Ê≠§ÁõÆÂΩï‰∏≠ÁîüÊïàÔºÅ"
    fi
}

# ËøêË°å‰∏ªÂáΩÊï∞
main "$@"